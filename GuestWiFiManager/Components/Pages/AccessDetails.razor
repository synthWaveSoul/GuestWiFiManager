@page "/accessDetails"
@rendermode InteractiveServer
@inherits AccessDetailsBase

@if (isErrorAnywhere == true)
{
    <div class="connection-error">@errorMessage</div>
}
else if (responseDetails.dataResponse != null)
{
    @if (responseDetails.dataResponse.error != "no_error")
    {
        <div class="connection-error">@responseDetails.dataResponse.error</div>
    }
    else
    {
        <div class="container">
            <div class="row">
                @foreach (var item in responseDetails.dataResponse.accountsHistoryDetails)
                {
                    <div class="col-lg-6 col-xl-4 my-3 d-flex justify-content-center">
                        <Card Color="@(item.isActive.Equals("yes") ? CardColor.Success : CardColor.Secondary)" Style="width:30rem;">
                            <CardBody>
                                <CardTitle Size="HeadingSize.H3">@item.name</CardTitle>
                                <CardText>
                                        <ul class="list-group list-group-flush" style="text-align:center">
                                            <li class="list-group-item">
                                                <div style="display:inline-flex">
                                                    <div style="font-weight:700">Created</div>
                                                    <div style="margin-left:10px">@item.createdAt</div>
                                                </div>
                                            </li>
                                            <li class="list-group-item">
                                                <div style="display:inline-flex">
                                                    <div style="font-weight:700">Expire</div>
                                                    <div style="margin-left:10px">@item.expires</div>
                                                </div>
                                            </li>
                                        </ul>
                                </CardText>
                                <div  class="d-grid gap-2">
                                    <Button 
                                        Disabled="@(item.isActive.Equals("no")? true : false)" 
                                        Color="ButtonColor.Info"
                                        @onclick="(() => showDetails(item.merakiEmailLogin, item.password, item.name))"
                                        Type="ButtonType.Link"
                                        >Show details
                                    </Button>
                                    <Button 
                                        Disabled="@(item.isActive.Equals("no")? true : false)" 
                                        Color="ButtonColor.Danger"
                                        @onclick="(() => confirmRevokeAccess(item.name, item.merakiEmailId))"
                                        Type="ButtonType.Link"
                                        >Revoke access
                                    </Button>
                                </div>
                            </CardBody>
                        </Card>
                    </div>
                }
            </div>
        </div>
    }
}

<Modal @ref="modalDetails" IsVerticallyCentered="true" />

<Modal @ref="modalConfirmRevoke" IsVerticallyCentered="true" />

<Modal @ref="modalAfterRevoke"
       IsVerticallyCentered="true"
       UseStaticBackdrop="true"
       CloseOnEscape="false"
       ShowCloseButton="false"
       />

<Modal @ref="modalError"
       Title="Error"
       IsVerticallyCentered="true"
       UseStaticBackdrop="true"
       CloseOnEscape="false"
       ShowCloseButton="false">
    <BodyTemplate>
        @if (isErrorAnywhere == true)
        {
            <div class="connection-error">@errorMessage</div>
        }
        else
        {
            @if (deleteResponseDetails.error != "no_error")
            {
                <div class="connection-error">@deleteResponseDetails.error</div>
            }
        }
    </BodyTemplate>
</Modal>

<Preload LoadingText="Loading..." />